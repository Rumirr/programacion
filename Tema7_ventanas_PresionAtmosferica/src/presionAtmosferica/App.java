package presionAtmosferica;

import javax.swing.*;

/**
 * Programa que permite convertir unidades de presión atmosférica tomadas a
 * cierta altitud, a medidas a nivel del mar.
 *
 * @author Gustavo Pereira Kurpel
 */
public class App extends JFrame {

	private final Ubicacion[] ubicaciones = new Ubicacion[20];
	private final float METERS_TO_FEET = 3.281f;

	// EN ESTE CASO SE UTILIZARA LOS PASCALES COMO UNIDAD PRINCIPAL DE MEDIDA DE
	// PRESION
	// sigue el mismo orden que el array units. los valores son cuanto vale 1 pascal
	// en las otras unidades.
	// si se desea cambiar la formula y esa formula utiliza otras unidades como
	// unidad principal, se debe cambiar los valores del array VALUES_OF_UNITS.
	private final double[] VALUES_OF_UNITS = { 100, 133.322, 101325, 1 };
	private final String[] UNITS = { "mbar", "mmhg", "atm", "Pa" };

	/**
	 * Constructor de la clase.
	 */
	public App() {
		initComponents();
		SwingUtilities.updateComponentTreeUI(this);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		rBtnGroup = new javax.swing.ButtonGroup();
		panelUbicaciones = new javax.swing.JPanel();
		lblLocalidad = new javax.swing.JLabel();
		txtLocalidad = new javax.swing.JTextField();
		lblAltitud = new javax.swing.JLabel();
		txtAltitud = new javax.swing.JTextField();
		btnAgregarUbicacion = new javax.swing.JButton();
		rBtnMetros = new javax.swing.JRadioButton();
		rBtnFeet = new javax.swing.JRadioButton();
		panelCalculos = new javax.swing.JPanel();
		lblPresionMedida = new javax.swing.JLabel();
		txtPresionMedida = new javax.swing.JTextField();
		cmbUnidades = new javax.swing.JComboBox<>(UNITS);
		lblUnidades = new javax.swing.JLabel();
		lblUbicacion = new javax.swing.JLabel();
		cmbUbicacion = new javax.swing.JComboBox<>();
		lblPresionNormalizada = new javax.swing.JLabel();
		txtPresionNormalizada = new javax.swing.JTextField();
		btnCalcular = new javax.swing.JButton();
		jMenuBar1 = new javax.swing.JMenuBar();
		menuHerramientas = new javax.swing.JMenu();
		itemCalcular = new javax.swing.JMenuItem();
		itemOpciones = new javax.swing.JMenuItem();
		itemAcercaDe = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Presión Atmosférica");

		panelUbicaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ubicaciones",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

		lblLocalidad.setText("Localidad");

		lblAltitud.setText("Altitud");

		btnAgregarUbicacion.setText("Agregar");
		btnAgregarUbicacion.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnAgregarUbicacionActionPerformed(evt);
			}
		});

		rBtnGroup.add(rBtnMetros);
		rBtnMetros.setSelected(true);
		rBtnMetros.setText("(m)");

		rBtnGroup.add(rBtnFeet);
		rBtnFeet.setText("(ft)");

		javax.swing.GroupLayout panelUbicacionesLayout = new javax.swing.GroupLayout(panelUbicaciones);
		panelUbicaciones.setLayout(panelUbicacionesLayout);
		panelUbicacionesLayout.setHorizontalGroup(panelUbicacionesLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelUbicacionesLayout.createSequentialGroup().addContainerGap()
						.addGroup(panelUbicacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(lblLocalidad).addComponent(txtLocalidad,
										javax.swing.GroupLayout.PREFERRED_SIZE, 90,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(panelUbicacionesLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addGroup(panelUbicacionesLayout.createSequentialGroup().addComponent(lblAltitud)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(rBtnMetros)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(rBtnFeet))
								.addComponent(txtAltitud))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(btnAgregarUbicacion).addGap(15, 15, 15)));
		panelUbicacionesLayout.setVerticalGroup(panelUbicacionesLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelUbicacionesLayout.createSequentialGroup().addGap(8, 8, 8)
						.addGroup(panelUbicacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
								.addComponent(lblLocalidad).addComponent(lblAltitud).addComponent(rBtnMetros)
								.addComponent(rBtnFeet))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(panelUbicacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
								.addComponent(txtAltitud, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(txtLocalidad, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(btnAgregarUbicacion))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		panelCalculos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calculos",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

		lblPresionMedida.setText("Presión Medida");

		lblUnidades.setText("Unidades");

		lblUbicacion.setText("Ubicaciones");

		cmbUbicacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona ubicación" }));
		cmbUbicacion.setName(""); // NOI18N

		lblPresionNormalizada.setText("Normalizada");

		txtPresionNormalizada.setEditable(false);
		txtPresionNormalizada.setBackground(new java.awt.Color(255, 246, 131));

		btnCalcular.setText("Calcular");
		btnCalcular.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCalcularActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout panelCalculosLayout = new javax.swing.GroupLayout(panelCalculos);
		panelCalculos.setLayout(panelCalculosLayout);
		panelCalculosLayout.setHorizontalGroup(panelCalculosLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelCalculosLayout.createSequentialGroup().addGroup(panelCalculosLayout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(panelCalculosLayout.createSequentialGroup().addContainerGap()
								.addGroup(panelCalculosLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(txtPresionMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 90,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(lblPresionMedida, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(txtPresionNormalizada))
								.addGap(39, 39, 39)
								.addGroup(panelCalculosLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(lblUnidades)
										.addComponent(cmbUnidades, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(btnCalcular))
								.addGap(17, 17, 17)
								.addGroup(panelCalculosLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(lblUbicacion).addComponent(cmbUbicacion,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGroup(panelCalculosLayout.createSequentialGroup().addGap(6, 6, 6)
								.addComponent(lblPresionNormalizada)))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		panelCalculosLayout.setVerticalGroup(panelCalculosLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelCalculosLayout.createSequentialGroup().addContainerGap().addGroup(panelCalculosLayout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(lblUbicacion)
						.addGroup(panelCalculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(lblPresionMedida).addComponent(lblUnidades)))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(panelCalculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
								.addComponent(txtPresionMedida, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(cmbUnidades, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(cmbUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18).addComponent(lblPresionNormalizada)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(panelCalculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
								.addComponent(btnCalcular).addComponent(txtPresionNormalizada,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(17, Short.MAX_VALUE)));

		menuHerramientas.setText("Herramientas");

		itemCalcular.setText("Calcular");
		menuHerramientas.add(itemCalcular);

		itemOpciones.setText("Opciones");
		itemOpciones.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				itemOpcionesActionPerformed(evt);
			}
		});
		menuHerramientas.add(itemOpciones);

		itemAcercaDe.setText("Acerca de...");
		menuHerramientas.add(itemAcercaDe);

		jMenuBar1.add(menuHerramientas);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(panelUbicaciones, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(panelCalculos, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addComponent(panelUbicaciones, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(panelCalculos, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void itemOpcionesActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_itemOpcionesActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_itemOpcionesActionPerformed

	/**
	 * Agrega una nueva ubicación.
	 *
	 * @param evt Evento de acción al pulsar el botón btnAgregarUbicación.
	 */

	public void btnAgregarUbicacionActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnAgregarUbicacionActionPerformed
		String unidad;
		float altitud;

		if (txtLocalidad.getText().isEmpty()) {
			JOptionPane.showMessageDialog(null, "Rellene el campo de localidad.", "Campo vacio",
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		try {
			altitud = Float.valueOf(txtAltitud.getText());
		} catch (NumberFormatException nteException) {
			JOptionPane.showMessageDialog(null, "La altitud debe ser un número entero", "Valor nulo",
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		if (rBtnMetros.isSelected()) {
			unidad = "m";
		} else {
			unidad = "f";
		}
		Ubicacion ubicacion = new Ubicacion(txtLocalidad.getText(), altitud, unidad);
		addUbicacion(ubicacion);

		// actualizar los controles de la ventana
		txtLocalidad.setText("");
		txtAltitud.setText("");
	}// GEN-LAST:event_btnAgregarUbicacionActionPerformed

	/**
	 * Convierte la presión introducida por el usuario en una presión normalizada a
	 * nivel del mar.
	 *
	 * @param evt Evento de acción al pulsar el botón btnCalcular.
	 */

	public void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCalcularActionPerformed

		double result = 0;
		double pressuredMeasured;

		// leemos la presión y la comprobamos
		try {
			pressuredMeasured = Double.valueOf(txtPresionMedida.getText());
		} catch (NumberFormatException nfeException) {
			JOptionPane.showMessageDialog(null,
					"Presión medida invalida. El campo solo debe contener números seperados por un punto (.).",
					"Campo invalido", JOptionPane.ERROR_MESSAGE);
			return;
		}

		// leemos la ubicación y la comprobamos
		int opcion = cmbUbicacion.getSelectedIndex() - 1;
		if (opcion == -1) {
			JOptionPane.showMessageDialog(null, "Selecciona una ubicación para calcular la presión normalizada",
					"Ubicación no seleccionada", JOptionPane.ERROR_MESSAGE);
			return;
		} else {
			result = presureForAltitude(ubicaciones[opcion].getAltitud(), ubicaciones[opcion].getUnidad(),
					toPascal(pressuredMeasured, cmbUnidades.getSelectedIndex()));
		}

		txtPresionNormalizada.setText(String.format("%.2f %s", toOtherUnit(result, cmbUnidades.getSelectedIndex()),
				cmbUnidades.getSelectedItem()));
	}// GEN-LAST:event_btnCalcularActionPerformed

	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| javax.swing.UnsupportedLookAndFeelException ex) {
			// java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE,
			// null, ex);
			ex.printStackTrace();
		} // </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new App().setVisible(true);
			}
		});
	}

	// <editor-fold defaultstate="collapsed" desc="Métodos hecho por el
	// programador">

	/**
	 * Añade un objeto tipo Ubicación al array "ubicaciones".
	 * 
	 * @param ubicacionUser Ubicación de un lugar.
	 */
	public void addUbicacion(Ubicacion ubicacionUser) {
		for (int i = 0; i < ubicaciones.length; i++) {
			if (ubicaciones[i] != null && ubicaciones[i].getLocalidad().equalsIgnoreCase(ubicacionUser.getLocalidad())
					&& ubicaciones[i].getUnidad().equalsIgnoreCase(ubicacionUser.getUnidad())
					&& ubicaciones[i].getAltitud() == ubicacionUser.getAltitud()) {
				JOptionPane.showMessageDialog(null, "Ubicación añandida anteriormente a la lista.",
						"Ubicación repetida", JOptionPane.INFORMATION_MESSAGE);
				break;
			}
			if (ubicaciones[i] == null) {

				ubicaciones[i] = ubicacionUser;
				cmbUbicacion.addItem(ubicaciones[i].toString());
				JOptionPane.showMessageDialog(null, "Ubicación añandida a la lista.", "Ubicación añandida",
						JOptionPane.INFORMATION_MESSAGE);
				break;
			}
		}

	}

	/**
	 * Método para pasar de metros a pies.
	 * 
	 * @param meters Recibe un número en metros.
	 * @return Devuelve un número en pies.
	 */
	public double toFt(double meters) {
		return meters * METERS_TO_FEET;
	}

	/**
	 * Método para pasar de pies a metros.
	 * 
	 * @param feets Recibe un número en pies.
	 * @return Devuelve un número en metros.
	 */

	public double toMeters(double feets) {
		return feets / METERS_TO_FEET;
	}

	/**
	 * Calcula la presión anivel del mar a partir de la presión medida.
	 * 
	 * @param elevation Altitud del lugar de medición.
	 * @param elevationUnit Unidad utilizada para la presión medida.
	 * @param presureMeasured Presión medidaa cierta altitud.
	 * @return
	 */

	public double presureForAltitude(double elevation, String elevationUnit, double presureMeasured) {
		// https://en.wikipedia.org/wiki/Pressure_altitude
		// se debere recibir la "elevation" en pies y "presureMeasured" en milibares. El
		// resultado se devuelve en milibares.
		// precionNormalizada = elevacion(feets) + 30 * (1013.25(milibar) -
		// presionMedida(milibar))
//        if (elevationUnit.equalsIgnoreCase("m")) {
//            elevation = toFt(elevation);
//        }
//        return elevation + 30 * (1013.25 - presureMeasured);

		// precionNormalizada = presion medida + densidad aire * gravedad * altura
		// precionNormalizada = presionMedida + 1.255 (15ºC) * 9.8 * altura
		final double G = 9.8;
		final double DENSIDAD_AIRE = 1.255;

		if (elevationUnit.equalsIgnoreCase("f")) {
			elevation = toMeters(elevation);
		}
		return presureMeasured + DENSIDAD_AIRE * G * elevation;
	}

	
	/**
         * 
         * @param pressure
         * @param unitSelected
         * @return 
         */
	
	public double toOtherUnit(double pressure, int unitSelected) {

		return pressure / VALUES_OF_UNITS[unitSelected];

//        if (unit.equals("mmhg")) {
//            return pressure / 133.322;
//        } else if (unit.equals("atm")) {
//            return pressure / 101325;
//        } else if (unit.equals("mbar")) {
//            return pressure / 100;
//        } else {
//            return pressure;
//        }
	}

	public double toPascal(double pressure, int unitSelected) {

		return pressure * VALUES_OF_UNITS[unitSelected];

//        if (unit.equals("mmhg")) {
//            return pressure * 133.322;
//        } else if (unit.equals("atm")) {
//            return pressure * 101325;
//        } else if (unit.equals("mbar")) {
//            return pressure * 100;
//        } else {
//            return pressure;
//        }
	}

	// <editor-fold defaultstate="collapsed" desc="método utilizado para la primera
	// fromula del calculo de presion normalizada">
//    // obtenes otra unidad a travéz de milibares
//
//    public double toOther(double pressure, Object unit) {
//        if (unit.equals("mmhg")) {
//            return pressure / 0.750062;
//        } else if (unit.equals("atm")) {
//            return pressure / 0.00098692;
//        } else if (unit.equals("Pa")) {
//            return pressure / 100;
//        } else {
//            return pressure;
//        }
//    }
//
//    // obtener milibares a travéz de otra unidad
//
//    public double toMb(double pressure, Object unit) {
//        if (unit.equals("mmhg")) {
//            return pressure * 0.750062;
//        } else if (unit.equals("atm")) {
//            return pressure * 0.00098692;
//        } else if (unit.equals("Pa")) {
//            return pressure * 100;
//        } else {
//            return pressure;
//        }
//    }// </editor-fold>  
// </editor-fold>  

	/*-----------------------------------------------------------------------*/

	// Variables declaration - do not modify//GEN-BEGIN:variables
	public javax.swing.JButton btnAgregarUbicacion;
	private javax.swing.JButton btnCalcular;
	private javax.swing.JComboBox<String> cmbUbicacion;
	private javax.swing.JComboBox<String> cmbUnidades;
	private javax.swing.JMenuItem itemAcercaDe;
	private javax.swing.JMenuItem itemCalcular;
	private javax.swing.JMenuItem itemOpciones;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JLabel lblAltitud;
	private javax.swing.JLabel lblLocalidad;
	private javax.swing.JLabel lblPresionMedida;
	private javax.swing.JLabel lblPresionNormalizada;
	private javax.swing.JLabel lblUbicacion;
	private javax.swing.JLabel lblUnidades;
	private javax.swing.JMenu menuHerramientas;
	private javax.swing.JPanel panelCalculos;
	private javax.swing.JPanel panelUbicaciones;
	private javax.swing.JRadioButton rBtnFeet;
	private javax.swing.ButtonGroup rBtnGroup;
	private javax.swing.JRadioButton rBtnMetros;
	private javax.swing.JTextField txtAltitud;
	private javax.swing.JTextField txtLocalidad;
	private javax.swing.JTextField txtPresionMedida;
	private javax.swing.JTextField txtPresionNormalizada;
	// End of variables declaration//GEN-END:variables
}
